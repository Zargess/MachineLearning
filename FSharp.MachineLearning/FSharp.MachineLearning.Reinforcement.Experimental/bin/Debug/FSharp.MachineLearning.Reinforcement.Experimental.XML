<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.MachineLearning.Reinforcement.Experimental</name></assembly>
<members>
<member name="M:List.findAllIndicies``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32)">
 <summary>
 Finds all the indicies where the function returns true
 </summary>
 <param name="func"></param>
 <param name="list"></param>
 <param name="indicies"></param>
 <param name="counter"></param>
</member>
<member name="M:List.replaceAt``1(Microsoft.FSharp.Collections.FSharpList{``0},``0,System.Int32)">
 <summary>
 Replaces the current value at the given index
 </summary>
 <param name="list"></param>
 <param name="value"></param>
 <param name="index"></param>
 <exception cref="Index out of bounds"> Fails if index is negative or greater than the length of the list </exception>
</member>
<member name="M:Zargess.MachineLearning.ReinforcementLearning.QLearning.learn(Zargess.MachineLearning.ReinforcementLearning.GameConfiguration,System.Int32)">
 <summary>
 Learns the given model based and the defined game configuration by playing the game the specified number of times.
 </summary>
 <param name="gc">The configuration descriping the game design.</param>
 <param name="rounds">Number of games to play before termination.</param>
 <returns>The learned Q map.</returns>
</member>
<member name="M:Zargess.MachineLearning.ReinforcementLearning.QLearning.getRandomAction(System.Random,Microsoft.FSharp.Collections.FSharpList{Zargess.MachineLearning.ReinforcementLearning.Action})">
 <summary>
 Gets a random action from an list of actions given a way to get a random number.
 </summary>
 <param name="random">A System.Random object.</param>
 <param name="actions">A list of actions.</param>
 <returns>An action option. Returns None if actions is empty.</returns>
</member>
<member name="M:Zargess.MachineLearning.ReinforcementLearning.QLearning.getActionGreedy(Microsoft.FSharp.Core.FSharpFunc{Zargess.MachineLearning.ReinforcementLearning.State,Microsoft.FSharp.Core.FSharpFunc{Zargess.MachineLearning.ReinforcementLearning.Action,System.Double}},Zargess.MachineLearning.ReinforcementLearning.State,Microsoft.FSharp.Collections.FSharpList{Zargess.MachineLearning.ReinforcementLearning.Action})">
 <summary>
 Gets the action with the best expected value.
 </summary>
 <param name="lookup">A function to get the value of a given state action pair.</param>
 <param name="currentState">The current game state.</param>
 <param name="actions">The available actions for a state.</param>
 <returns>The action resulting with best expected value.</returns>
</member>
</members>
</doc>
